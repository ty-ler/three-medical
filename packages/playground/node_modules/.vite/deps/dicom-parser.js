import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-QOVRSCHT.js";

// browser-external:zlib
var zlib_exports = {};
__export(zlib_exports, {
  default: () => zlib_default
});
var zlib_default;
var init_zlib = __esm({
  "browser-external:zlib"() {
    zlib_default = new Proxy({}, {
      get() {
        throw new Error('Module "zlib" has been externalized for browser compatibility and cannot be accessed in client code.');
      }
    });
  }
});

// node_modules/dicom-parser/dist/dicomParser.min.js
var require_dicomParser_min = __commonJS({
  "node_modules/dicom-parser/dist/dicomParser.min.js"(exports, module) {
    !function(e, t) {
      typeof exports == "object" && typeof module == "object" ? module.exports = t((init_zlib(), __toCommonJS(zlib_exports))) : typeof define == "function" && define.amd ? define("dicom-parser", ["zlib"], t) : typeof exports == "object" ? exports["dicom-parser"] = t((init_zlib(), __toCommonJS(zlib_exports))) : e.dicomParser = t(e.zlib);
    }(exports, function(r) {
      return a = [function(e, t) {
        e.exports = r;
      }, function(e, t, s) {
        "use strict";
        s.r(t), s.d(t, "isStringVr", function() {
          return d;
        }), s.d(t, "isPrivateTag", function() {
          return f;
        }), s.d(t, "parsePN", function() {
          return a2;
        }), s.d(t, "parseTM", function() {
          return n2;
        }), s.d(t, "parseDA", function() {
          return o;
        }), s.d(t, "explicitElementToString", function() {
          return l;
        }), s.d(t, "explicitDataSetToJS", function() {
          return u;
        }), s.d(t, "createJPEGBasicOffsetTable", function() {
          return p;
        }), s.d(t, "parseDicomDataSetExplicit", function() {
          return q;
        }), s.d(t, "parseDicomDataSetImplicit", function() {
          return T;
        }), s.d(t, "readFixedString", function() {
          return b;
        }), s.d(t, "alloc", function() {
          return k;
        }), s.d(t, "version", function() {
          return L;
        }), s.d(t, "bigEndianByteArrayParser", function() {
          return N;
        }), s.d(t, "ByteStream", function() {
          return J;
        }), s.d(t, "sharedCopy", function() {
          return j;
        }), s.d(t, "DataSet", function() {
          return w;
        }), s.d(t, "findAndSetUNElementLength", function() {
          return y;
        }), s.d(t, "findEndOfEncapsulatedElement", function() {
          return g;
        }), s.d(t, "findItemDelimitationItemAndSetElementLength", function() {
          return x;
        }), s.d(t, "littleEndianByteArrayParser", function() {
          return M;
        }), s.d(t, "parseDicom", function() {
          return V;
        }), s.d(t, "readDicomElementExplicit", function() {
          return B;
        }), s.d(t, "readDicomElementImplicit", function() {
          return A;
        }), s.d(t, "readEncapsulatedImageFrame", function() {
          return W;
        }), s.d(t, "readEncapsulatedPixelData", function() {
          return K;
        }), s.d(t, "readEncapsulatedPixelDataFromFragments", function() {
          return _;
        }), s.d(t, "readPart10Header", function() {
          return G;
        }), s.d(t, "readSequenceItemsExplicit", function() {
          return I;
        }), s.d(t, "readSequenceItemsImplicit", function() {
          return F;
        }), s.d(t, "readSequenceItem", function() {
          return S;
        }), s.d(t, "readTag", function() {
          return h;
        });
        var r2 = { AE: true, AS: true, AT: false, CS: true, DA: true, DS: true, DT: true, FL: false, FD: false, IS: true, LO: true, LT: true, OB: false, OD: false, OF: false, OW: false, PN: true, SH: true, SL: false, SQ: false, SS: false, ST: true, TM: true, UI: true, UL: false, UN: void 0, UR: true, US: false, UT: true }, d = function(e2) {
          return r2[e2];
        }, f = function(e2) {
          return parseInt(e2[4], 10) % 2 == 1;
        }, a2 = function(e2) {
          if (e2 !== void 0) {
            e2 = e2.split("^");
            return { familyName: e2[0], givenName: e2[1], middleName: e2[2], prefix: e2[3], suffix: e2[4] };
          }
        };
        function n2(e2, t2) {
          if (2 <= e2.length) {
            var r3 = parseInt(e2.substring(0, 2), 10), a3 = 4 <= e2.length ? parseInt(e2.substring(2, 4), 10) : void 0, n3 = 6 <= e2.length ? parseInt(e2.substring(4, 6), 10) : void 0, i3 = 8 <= e2.length ? e2.substring(7, 13) : void 0, i3 = i3 ? parseInt(i3, 10) * Math.pow(10, 6 - i3.length) : void 0;
            if (t2 && (isNaN(r3) || a3 !== void 0 && isNaN(a3) || n3 !== void 0 && isNaN(n3) || i3 !== void 0 && isNaN(i3) || r3 < 0 || 23 < r3 || a3 && (a3 < 0 || 59 < a3) || n3 && (n3 < 0 || 59 < n3) || i3 && (i3 < 0 || 999999 < i3)))
              throw "invalid TM '".concat(e2, "'");
            return { hours: r3, minutes: a3, seconds: n3, fractionalSeconds: i3 };
          }
          if (t2)
            throw "invalid TM '".concat(e2, "'");
        }
        function i2(e2, t2, r3) {
          return !isNaN(r3) && (0 < t2 && t2 <= 12 && 0 < e2 && e2 <= function(e3, t3) {
            switch (e3) {
              case 2:
                return t3 % 4 == 0 && t3 % 100 || t3 % 400 == 0 ? 29 : 28;
              case 9:
              case 4:
              case 6:
              case 11:
                return 30;
              default:
                return 31;
            }
          }(t2, r3));
        }
        function o(e2, t2) {
          if (e2 && e2.length === 8) {
            var r3 = parseInt(e2.substring(0, 4), 10), a3 = parseInt(e2.substring(4, 6), 10), n3 = parseInt(e2.substring(6, 8), 10);
            if (t2 && i2(n3, a3, r3) !== true)
              throw "invalid DA '".concat(e2, "'");
            return { year: r3, month: a3, day: n3 };
          }
          if (t2)
            throw "invalid DA '".concat(e2, "'");
        }
        function l(n3, e2) {
          if (n3 === void 0 || e2 === void 0)
            throw "dicomParser.explicitElementToString: missing required parameters";
          if (e2.vr === void 0)
            throw "dicomParser.explicitElementToString: cannot convert implicit element to string";
          var t2, r3 = e2.vr, i3 = e2.tag;
          function a3(e3, t3) {
            for (var r4 = "", a4 = 0; a4 < e3; a4++)
              a4 !== 0 && (r4 += "/"), r4 += t3.call(n3, i3, a4).toString();
            return r4;
          }
          if (d(r3) === true)
            t2 = n3.string(i3);
          else {
            if (r3 === "AT") {
              var o2 = n3.uint32(i3);
              return o2 === void 0 ? void 0 : "x".concat((o2 = o2 < 0 ? 4294967295 + o2 + 1 : o2).toString(16).toUpperCase());
            }
            r3 === "US" ? t2 = a3(e2.length / 2, n3.uint16) : r3 === "SS" ? t2 = a3(e2.length / 2, n3.int16) : r3 === "UL" ? t2 = a3(e2.length / 4, n3.uint32) : r3 === "SL" ? t2 = a3(e2.length / 4, n3.int32) : r3 === "FD" ? t2 = a3(e2.length / 8, n3.double) : r3 === "FL" && (t2 = a3(e2.length / 4, n3.float));
          }
          return t2;
        }
        function u(e2, t2) {
          if (e2 === void 0)
            throw "dicomParser.explicitDataSetToJS: missing required parameter dataSet";
          t2 = t2 || { omitPrivateAttibutes: true, maxElementLength: 128 };
          var r3, a3 = {};
          for (r3 in e2.elements) {
            var n3 = e2.elements[r3];
            if (t2.omitPrivateAttibutes !== true || !f(r3))
              if (n3.items) {
                for (var i3 = [], o2 = 0; o2 < n3.items.length; o2++)
                  i3.push(u(n3.items[o2].dataSet, t2));
                a3[r3] = i3;
              } else {
                var s2 = void 0;
                n3.length < t2.maxElementLength && (s2 = l(e2, n3)), a3[r3] = s2 !== void 0 ? s2 : { dataOffset: n3.dataOffset, length: n3.length };
              }
          }
          return a3;
        }
        function m(e2, t2) {
          return e2.byteArray[t2] === 255 && e2.byteArray[t2 + 1] === 217;
        }
        function c(e2, t2, r3) {
          for (var a3, n3, i3 = r3; i3 < t2.fragments.length; i3++)
            if (a3 = e2, n3 = i3, n3 = t2.fragments[n3], !(!m(a3, n3.position + n3.length - 2) && !m(a3, n3.position + n3.length - 3)))
              return i3;
        }
        function p(e2, t2, r3) {
          if (e2 === void 0)
            throw "dicomParser.createJPEGBasicOffsetTable: missing required parameter dataSet";
          if (t2 === void 0)
            throw "dicomParser.createJPEGBasicOffsetTable: missing required parameter pixelDataElement";
          if (t2.tag !== "x7fe00010")
            throw "dicomParser.createJPEGBasicOffsetTable: parameter 'pixelDataElement' refers to non pixel data tag (expected tag = x7fe00010'";
          if (t2.encapsulatedPixelData !== true)
            throw "dicomParser.createJPEGBasicOffsetTable: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";
          if (t2.hadUndefinedLength !== true)
            throw "dicomParser.createJPEGBasicOffsetTable: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";
          if (t2.basicOffsetTable === void 0)
            throw "dicomParser.createJPEGBasicOffsetTable: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";
          if (t2.fragments === void 0)
            throw "dicomParser.createJPEGBasicOffsetTable: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";
          if (t2.fragments.length <= 0)
            throw "dicomParser.createJPEGBasicOffsetTable: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";
          if (r3 && r3.length <= 0)
            throw "dicomParser.createJPEGBasicOffsetTable: parameter 'fragments' must not be zero length";
          r3 = r3 || t2.fragments;
          for (var a3 = [], n3 = 0; ; ) {
            a3.push(t2.fragments[n3].offset);
            var i3 = c(e2, t2, n3);
            if (i3 === void 0 || i3 === t2.fragments.length - 1)
              return a3;
            n3 = i3 + 1;
          }
        }
        function h(e2) {
          if (e2 === void 0)
            throw "dicomParser.readTag: missing required parameter 'byteStream'";
          var t2 = 256 * e2.readUint16() * 256, e2 = e2.readUint16();
          return "x".concat("00000000".concat((t2 + e2).toString(16)).substr(-8));
        }
        function g(e2, t2, r3) {
          if (e2 === void 0)
            throw "dicomParser.findEndOfEncapsulatedElement: missing required parameter 'byteStream'";
          if (t2 === void 0)
            throw "dicomParser.findEndOfEncapsulatedElement: missing required parameter 'element'";
          if (t2.encapsulatedPixelData = true, t2.basicOffsetTable = [], t2.fragments = [], h(e2) !== "xfffee000")
            throw "dicomParser.findEndOfEncapsulatedElement: basic offset table not found";
          for (var a3 = e2.readUint32() / 4, n3 = 0; n3 < a3; n3++) {
            var i3 = e2.readUint32();
            t2.basicOffsetTable.push(i3);
          }
          for (var o2 = e2.position; e2.position < e2.byteArray.length; ) {
            var s2 = h(e2), d2 = e2.readUint32();
            if (s2 === "xfffee0dd")
              return e2.seek(d2), void (t2.length = e2.position - t2.dataOffset);
            if (s2 !== "xfffee000")
              return r3 && r3.push("unexpected tag ".concat(s2, " while searching for end of pixel data element with undefined length")), d2 > e2.byteArray.length - e2.position && (d2 = e2.byteArray.length - e2.position), t2.fragments.push({ offset: e2.position - o2 - 8, position: e2.position, length: d2 }), e2.seek(d2), void (t2.length = e2.position - t2.dataOffset);
            t2.fragments.push({ offset: e2.position - o2 - 8, position: e2.position, length: d2 }), e2.seek(d2);
          }
          r3 && r3.push("pixel data element ".concat(t2.tag, " missing sequence delimiter tag xfffee0dd"));
        }
        function y(e2, t2) {
          if (e2 === void 0)
            throw "dicomParser.findAndSetUNElementLength: missing required parameter 'byteStream'";
          for (var r3 = e2.byteArray.length - 8; e2.position <= r3; )
            if (e2.readUint16() === 65534) {
              var a3 = e2.readUint16();
              if (a3 === 57565)
                return e2.readUint32() !== 0 && e2.warnings("encountered non zero length following item delimiter at position ".concat(e2.position - 4, " while reading element of undefined length with tag ").concat(t2.tag)), void (t2.length = e2.position - t2.dataOffset);
            }
          t2.length = e2.byteArray.length - t2.dataOffset, e2.seek(e2.byteArray.length - e2.position);
        }
        function b(e2, t2, r3) {
          if (r3 < 0)
            throw "dicomParser.readFixedString - length cannot be less than 0";
          if (t2 + r3 > e2.length)
            throw "dicomParser.readFixedString: attempt to read past end of buffer";
          for (var a3, n3 = "", i3 = 0; i3 < r3; i3++) {
            if ((a3 = e2[t2 + i3]) === 0)
              return t2 += r3, n3;
            n3 += String.fromCharCode(a3);
          }
          return n3;
        }
        function v(e2, t2) {
          for (var r3 = 0; r3 < t2.length; r3++) {
            var a3 = t2[r3];
            a3.enumerable = a3.enumerable || false, a3.configurable = true, "value" in a3 && (a3.writable = true), Object.defineProperty(e2, a3.key, a3);
          }
        }
        function P(e2, t2) {
          return e2.parser !== void 0 ? e2.parser : t2;
        }
        var w = function() {
          function a3(e3, t3, r4) {
            !function(e4, t4) {
              if (!(e4 instanceof t4))
                throw new TypeError("Cannot call a class as a function");
            }(this, a3), this.byteArrayParser = e3, this.byteArray = t3, this.elements = r4;
          }
          var e2, t2, r3;
          return e2 = a3, (t2 = [{ key: "uint16", value: function(e3, t3) {
            e3 = this.elements[e3];
            if (t3 = t3 !== void 0 ? t3 : 0, e3 && e3.length !== 0)
              return P(e3, this.byteArrayParser).readUint16(this.byteArray, e3.dataOffset + 2 * t3);
          } }, { key: "int16", value: function(e3, t3) {
            e3 = this.elements[e3];
            if (t3 = t3 !== void 0 ? t3 : 0, e3 && e3.length !== 0)
              return P(e3, this.byteArrayParser).readInt16(this.byteArray, e3.dataOffset + 2 * t3);
          } }, { key: "uint32", value: function(e3, t3) {
            e3 = this.elements[e3];
            if (t3 = t3 !== void 0 ? t3 : 0, e3 && e3.length !== 0)
              return P(e3, this.byteArrayParser).readUint32(this.byteArray, e3.dataOffset + 4 * t3);
          } }, { key: "int32", value: function(e3, t3) {
            e3 = this.elements[e3];
            if (t3 = t3 !== void 0 ? t3 : 0, e3 && e3.length !== 0)
              return P(e3, this.byteArrayParser).readInt32(this.byteArray, e3.dataOffset + 4 * t3);
          } }, { key: "float", value: function(e3, t3) {
            e3 = this.elements[e3];
            if (t3 = t3 !== void 0 ? t3 : 0, e3 && e3.length !== 0)
              return P(e3, this.byteArrayParser).readFloat(this.byteArray, e3.dataOffset + 4 * t3);
          } }, { key: "double", value: function(e3, t3) {
            e3 = this.elements[e3];
            if (t3 = t3 !== void 0 ? t3 : 0, e3 && e3.length !== 0)
              return P(e3, this.byteArrayParser).readDouble(this.byteArray, e3.dataOffset + 8 * t3);
          } }, { key: "numStringValues", value: function(e3) {
            e3 = this.elements[e3];
            if (e3 && 0 < e3.length) {
              e3 = b(this.byteArray, e3.dataOffset, e3.length).match(/\\/g);
              return e3 === null ? 1 : e3.length + 1;
            }
          } }, { key: "string", value: function(e3, t3) {
            e3 = this.elements[e3];
            if (e3 && e3.Value)
              return e3.Value;
            if (e3 && 0 < e3.length) {
              e3 = b(this.byteArray, e3.dataOffset, e3.length);
              return 0 <= t3 ? e3.split("\\")[t3].trim() : e3.trim();
            }
          } }, { key: "text", value: function(e3, t3) {
            e3 = this.elements[e3];
            if (e3 && 0 < e3.length) {
              e3 = b(this.byteArray, e3.dataOffset, e3.length);
              return 0 <= t3 ? e3.split("\\")[t3].replace(/ +$/, "") : e3.replace(/ +$/, "");
            }
          } }, { key: "floatString", value: function(e3, t3) {
            var r4 = this.elements[e3];
            if (r4 && 0 < r4.length) {
              t3 = this.string(e3, t3 = t3 !== void 0 ? t3 : 0);
              if (t3 !== void 0)
                return parseFloat(t3);
            }
          } }, { key: "intString", value: function(e3, t3) {
            var r4 = this.elements[e3];
            if (r4 && 0 < r4.length) {
              t3 = this.string(e3, t3 = t3 !== void 0 ? t3 : 0);
              if (t3 !== void 0)
                return parseInt(t3);
            }
          } }, { key: "attributeTag", value: function(e3) {
            var t3 = this.elements[e3];
            if (t3 && t3.length === 4) {
              var r4 = P(t3, this.byteArrayParser).readUint16, e3 = this.byteArray, t3 = t3.dataOffset;
              return "x".concat("00000000".concat((256 * r4(e3, t3) * 256 + r4(e3, t3 + 2)).toString(16)).substr(-8));
            }
          } }]) && v(e2.prototype, t2), r3 && v(e2, r3), Object.defineProperty(e2, "prototype", { writable: false }), a3;
        }();
        function x(e2, t2) {
          if (e2 === void 0)
            throw "dicomParser.readDicomElementImplicit: missing required parameter 'byteStream'";
          for (var r3 = e2.byteArray.length - 8; e2.position <= r3; )
            if (e2.readUint16() === 65534) {
              var a3 = e2.readUint16();
              if (a3 === 57357)
                return e2.readUint32() !== 0 && e2.warnings("encountered non zero length following item delimiter at position ".concat(e2.position - 4, " while reading element of undefined length with tag ").concat(t2.tag)), void (t2.length = e2.position - t2.dataOffset);
            }
          t2.length = e2.byteArray.length - t2.dataOffset, e2.seek(e2.byteArray.length - e2.position);
        }
        var E = function(e2, t2, r3) {
          if (r3 !== void 0)
            return r3(e2.tag) === "SQ";
          if (t2.position + 4 <= t2.byteArray.length) {
            e2 = h(t2);
            return t2.seek(-4), e2 === "xfffee000" || e2 === "xfffee0dd";
          }
          return t2.warnings.push("eof encountered before finding sequence item tag or sequence delimiter tag in peeking to determine VR"), false;
        };
        function A(e2, t2, r3) {
          if (e2 === void 0)
            throw "dicomParser.readDicomElementImplicit: missing required parameter 'byteStream'";
          var a3 = { tag: h(e2), length: e2.readUint32(), dataOffset: e2.position };
          return a3.length === 4294967295 && (a3.hadUndefinedLength = true), a3.tag === t2 || (E(a3, e2, r3) && !f(a3.tag) ? F(e2, a3) : a3.hadUndefinedLength ? x(e2, a3) : e2.seek(a3.length)), a3;
        }
        function S(e2) {
          if (e2 === void 0)
            throw "dicomParser.readSequenceItem: missing required parameter 'byteStream'";
          var t2 = { tag: h(e2), length: e2.readUint32(), dataOffset: e2.position };
          if (t2.tag !== "xfffee000")
            throw "dicomParser.readSequenceItem: item tag (FFFE,E000) not found at offset ".concat(e2.position);
          return t2;
        }
        function D(e2, t2) {
          var r3 = S(e2);
          return r3.length === 4294967295 ? (r3.hadUndefinedLength = true, r3.dataSet = function(e3, t3) {
            for (var r4 = {}; e3.position < e3.byteArray.length; ) {
              var a3 = A(e3, void 0, t3);
              if ((r4[a3.tag] = a3).tag === "xfffee00d")
                return new w(e3.byteArrayParser, e3.byteArray, r4);
            }
            return e3.warnings.push("eof encountered before finding sequence item delimiter in sequence item of undefined length"), new w(e3.byteArrayParser, e3.byteArray, r4);
          }(e2, t2), r3.length = e2.position - r3.dataOffset) : (r3.dataSet = new w(e2.byteArrayParser, e2.byteArray, {}), T(r3.dataSet, e2, e2.position + r3.length, { vrCallback: t2 })), r3;
        }
        function F(e2, t2, r3) {
          if (e2 === void 0)
            throw "dicomParser.readSequenceItemsImplicit: missing required parameter 'byteStream'";
          if (t2 === void 0)
            throw "dicomParser.readSequenceItemsImplicit: missing required parameter 'element'";
          t2.items = [], (t2.length === 4294967295 ? function(e3, t3, r4) {
            for (; e3.position + 4 <= e3.byteArray.length; ) {
              var a3 = h(e3);
              if (e3.seek(-4), a3 === "xfffee0dd")
                return t3.length = e3.position - t3.dataOffset, e3.seek(8);
              a3 = D(e3, r4);
              t3.items.push(a3);
            }
            e3.warnings.push("eof encountered before finding sequence delimiter in sequence of undefined length"), t3.length = e3.byteArray.length - t3.dataOffset;
          } : function(e3, t3, r4) {
            for (var a3 = t3.dataOffset + t3.length; e3.position < a3; ) {
              var n3 = D(e3, r4);
              t3.items.push(n3);
            }
          })(e2, t2, r3);
        }
        function O(e2, t2) {
          var r3 = S(e2);
          return r3.length === 4294967295 ? (r3.hadUndefinedLength = true, r3.dataSet = function(e3, t3) {
            for (var r4 = {}; e3.position < e3.byteArray.length; ) {
              var a3 = B(e3, t3);
              if ((r4[a3.tag] = a3).tag === "xfffee00d")
                return new w(e3.byteArrayParser, e3.byteArray, r4);
            }
            return t3.push("eof encountered before finding item delimiter tag while reading sequence item of undefined length"), new w(e3.byteArrayParser, e3.byteArray, r4);
          }(e2, t2), r3.length = e2.position - r3.dataOffset) : (r3.dataSet = new w(e2.byteArrayParser, e2.byteArray, {}), q(r3.dataSet, e2, e2.position + r3.length)), r3;
        }
        function I(e2, t2, r3) {
          if (e2 === void 0)
            throw "dicomParser.readSequenceItemsExplicit: missing required parameter 'byteStream'";
          if (t2 === void 0)
            throw "dicomParser.readSequenceItemsExplicit: missing required parameter 'element'";
          t2.items = [], (t2.length === 4294967295 ? function(e3, t3, r4) {
            for (; e3.position + 4 <= e3.byteArray.length; ) {
              var a3 = h(e3);
              if (e3.seek(-4), a3 === "xfffee0dd")
                return t3.length = e3.position - t3.dataOffset, e3.seek(8);
              a3 = O(e3, r4);
              t3.items.push(a3);
            }
            r4.push("eof encountered before finding sequence delimitation tag while reading sequence of undefined length"), t3.length = e3.position - t3.dataOffset;
          } : function(e3, t3, r4) {
            for (var a3 = t3.dataOffset + t3.length; e3.position < a3; ) {
              var n3 = O(e3, r4);
              t3.items.push(n3);
            }
          })(e2, t2, r3);
        }
        var U = function(e2) {
          return e2 === "OB" || e2 === "OD" || e2 === "OL" || e2 === "OW" || e2 === "SQ" || e2 === "OF" || e2 === "UC" || e2 === "UR" || e2 === "UT" || e2 === "UN" ? 4 : 2;
        };
        function B(e2, t2, r3) {
          if (e2 === void 0)
            throw "dicomParser.readDicomElementExplicit: missing required parameter 'byteStream'";
          var a3 = { tag: h(e2), vr: e2.readFixedString(2) };
          return U(a3.vr) === 2 ? a3.length = e2.readUint16() : (e2.seek(2), a3.length = e2.readUint32()), a3.dataOffset = e2.position, a3.length === 4294967295 && (a3.hadUndefinedLength = true), a3.tag === r3 || (a3.vr === "SQ" ? I(e2, a3, t2) : a3.length === 4294967295 ? a3.tag === "x7fe00010" ? g(e2, a3, t2) : (a3.vr === "UN" ? F : x)(e2, a3) : e2.seek(a3.length)), a3;
        }
        function q(e2, t2, r3) {
          var a3 = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : {};
          if (r3 = r3 === void 0 ? t2.byteArray.length : r3, t2 === void 0)
            throw "dicomParser.parseDicomDataSetExplicit: missing required parameter 'byteStream'";
          if (r3 < t2.position || r3 > t2.byteArray.length)
            throw "dicomParser.parseDicomDataSetExplicit: invalid value for parameter 'maxP osition'";
          for (var n3 = e2.elements; t2.position < r3; ) {
            var i3 = B(t2, e2.warnings, a3.untilTag);
            if ((n3[i3.tag] = i3).tag === a3.untilTag)
              return;
          }
          if (t2.position > r3)
            throw "dicomParser:parseDicomDataSetExplicit: buffer overrun";
        }
        function T(e2, t2, r3) {
          var a3 = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : {};
          if (r3 = r3 === void 0 ? e2.byteArray.length : r3, t2 === void 0)
            throw "dicomParser.parseDicomDataSetImplicit: missing required parameter 'byteStream'";
          if (r3 < t2.position || r3 > t2.byteArray.length)
            throw "dicomParser.parseDicomDataSetImplicit: invalid value for parameter 'maxPosition'";
          for (var n3 = e2.elements; t2.position < r3; ) {
            var i3 = A(t2, a3.untilTag, a3.vrCallback);
            if ((n3[i3.tag] = i3).tag === a3.untilTag)
              return;
          }
        }
        function k(e2, t2) {
          if (typeof Buffer != "undefined" && e2 instanceof Buffer)
            return Buffer.alloc(t2);
          if (e2 instanceof Uint8Array)
            return new Uint8Array(t2);
          throw "dicomParser.alloc: unknown type for byteArray";
        }
        var L = "1.8.12", N = { readUint16: function(e2, t2) {
          if (t2 < 0)
            throw "bigEndianByteArrayParser.readUint16: position cannot be less than 0";
          if (t2 + 2 > e2.length)
            throw "bigEndianByteArrayParser.readUint16: attempt to read past end of buffer";
          return (e2[t2] << 8) + e2[t2 + 1];
        }, readInt16: function(e2, t2) {
          if (t2 < 0)
            throw "bigEndianByteArrayParser.readInt16: position cannot be less than 0";
          if (t2 + 2 > e2.length)
            throw "bigEndianByteArrayParser.readInt16: attempt to read past end of buffer";
          t2 = (e2[t2] << 8) + e2[t2 + 1];
          return t2 = 32768 & t2 ? t2 - 65535 - 1 : t2;
        }, readUint32: function(e2, t2) {
          if (t2 < 0)
            throw "bigEndianByteArrayParser.readUint32: position cannot be less than 0";
          if (t2 + 4 > e2.length)
            throw "bigEndianByteArrayParser.readUint32: attempt to read past end of buffer";
          return 256 * (256 * (256 * e2[t2] + e2[t2 + 1]) + e2[t2 + 2]) + e2[t2 + 3];
        }, readInt32: function(e2, t2) {
          if (t2 < 0)
            throw "bigEndianByteArrayParser.readInt32: position cannot be less than 0";
          if (t2 + 4 > e2.length)
            throw "bigEndianByteArrayParser.readInt32: attempt to read past end of buffer";
          return (e2[t2] << 24) + (e2[t2 + 1] << 16) + (e2[t2 + 2] << 8) + e2[t2 + 3];
        }, readFloat: function(e2, t2) {
          if (t2 < 0)
            throw "bigEndianByteArrayParser.readFloat: position cannot be less than 0";
          if (t2 + 4 > e2.length)
            throw "bigEndianByteArrayParser.readFloat: attempt to read past end of buffer";
          var r3 = new Uint8Array(4);
          return r3[3] = e2[t2], r3[2] = e2[t2 + 1], r3[1] = e2[t2 + 2], r3[0] = e2[t2 + 3], new Float32Array(r3.buffer)[0];
        }, readDouble: function(e2, t2) {
          if (t2 < 0)
            throw "bigEndianByteArrayParser.readDouble: position cannot be less than 0";
          if (t2 + 8 > e2.length)
            throw "bigEndianByteArrayParser.readDouble: attempt to read past end of buffer";
          var r3 = new Uint8Array(8);
          return r3[7] = e2[t2], r3[6] = e2[t2 + 1], r3[5] = e2[t2 + 2], r3[4] = e2[t2 + 3], r3[3] = e2[t2 + 4], r3[2] = e2[t2 + 5], r3[1] = e2[t2 + 6], r3[0] = e2[t2 + 7], new Float64Array(r3.buffer)[0];
        } };
        function j(e2, t2, r3) {
          if (typeof Buffer != "undefined" && e2 instanceof Buffer)
            return e2.slice(t2, t2 + r3);
          if (e2 instanceof Uint8Array)
            return new Uint8Array(e2.buffer, e2.byteOffset + t2, r3);
          throw "dicomParser.from: unknown type for byteArray";
        }
        function C(e2, t2) {
          for (var r3 = 0; r3 < t2.length; r3++) {
            var a3 = t2[r3];
            a3.enumerable = a3.enumerable || false, a3.configurable = true, "value" in a3 && (a3.writable = true), Object.defineProperty(e2, a3.key, a3);
          }
        }
        var J = function() {
          function a3(e3, t3, r4) {
            if (!function(e4, t4) {
              if (!(e4 instanceof t4))
                throw new TypeError("Cannot call a class as a function");
            }(this, a3), e3 === void 0)
              throw "dicomParser.ByteStream: missing required parameter 'byteArrayParser'";
            if (t3 === void 0)
              throw "dicomParser.ByteStream: missing required parameter 'byteArray'";
            if (t3 instanceof Uint8Array == false && (typeof Buffer == "undefined" || t3 instanceof Buffer == false))
              throw "dicomParser.ByteStream: parameter byteArray is not of type Uint8Array or Buffer";
            if (r4 < 0)
              throw "dicomParser.ByteStream: parameter 'position' cannot be less than 0";
            if (r4 >= t3.length)
              throw "dicomParser.ByteStream: parameter 'position' cannot be greater than or equal to 'byteArray' length";
            this.byteArrayParser = e3, this.byteArray = t3, this.position = r4 || 0, this.warnings = [];
          }
          var e2, t2, r3;
          return e2 = a3, (t2 = [{ key: "seek", value: function(e3) {
            if (this.position + e3 < 0)
              throw "dicomParser.ByteStream.prototype.seek: cannot seek to position < 0";
            this.position += e3;
          } }, { key: "readByteStream", value: function(e3) {
            if (this.position + e3 > this.byteArray.length)
              throw "dicomParser.ByteStream.prototype.readByteStream: readByteStream - buffer overread";
            var t3 = j(this.byteArray, this.position, e3);
            return this.position += e3, new a3(this.byteArrayParser, t3);
          } }, { key: "getSize", value: function() {
            return this.byteArray.length;
          } }, { key: "readUint16", value: function() {
            var e3 = this.byteArrayParser.readUint16(this.byteArray, this.position);
            return this.position += 2, e3;
          } }, { key: "readUint32", value: function() {
            var e3 = this.byteArrayParser.readUint32(this.byteArray, this.position);
            return this.position += 4, e3;
          } }, { key: "readFixedString", value: function(e3) {
            var t3 = b(this.byteArray, this.position, e3);
            return this.position += e3, t3;
          } }]) && C(e2.prototype, t2), r3 && C(e2, r3), Object.defineProperty(e2, "prototype", { writable: false }), a3;
        }(), M = { readUint16: function(e2, t2) {
          if (t2 < 0)
            throw "littleEndianByteArrayParser.readUint16: position cannot be less than 0";
          if (t2 + 2 > e2.length)
            throw "littleEndianByteArrayParser.readUint16: attempt to read past end of buffer";
          return e2[t2] + 256 * e2[t2 + 1];
        }, readInt16: function(e2, t2) {
          if (t2 < 0)
            throw "littleEndianByteArrayParser.readInt16: position cannot be less than 0";
          if (t2 + 2 > e2.length)
            throw "littleEndianByteArrayParser.readInt16: attempt to read past end of buffer";
          t2 = e2[t2] + (e2[t2 + 1] << 8);
          return t2 = 32768 & t2 ? t2 - 65535 - 1 : t2;
        }, readUint32: function(e2, t2) {
          if (t2 < 0)
            throw "littleEndianByteArrayParser.readUint32: position cannot be less than 0";
          if (t2 + 4 > e2.length)
            throw "littleEndianByteArrayParser.readUint32: attempt to read past end of buffer";
          return e2[t2] + 256 * e2[t2 + 1] + 256 * e2[t2 + 2] * 256 + 256 * e2[t2 + 3] * 256 * 256;
        }, readInt32: function(e2, t2) {
          if (t2 < 0)
            throw "littleEndianByteArrayParser.readInt32: position cannot be less than 0";
          if (t2 + 4 > e2.length)
            throw "littleEndianByteArrayParser.readInt32: attempt to read past end of buffer";
          return e2[t2] + (e2[t2 + 1] << 8) + (e2[t2 + 2] << 16) + (e2[t2 + 3] << 24);
        }, readFloat: function(e2, t2) {
          if (t2 < 0)
            throw "littleEndianByteArrayParser.readFloat: position cannot be less than 0";
          if (t2 + 4 > e2.length)
            throw "littleEndianByteArrayParser.readFloat: attempt to read past end of buffer";
          var r3 = new Uint8Array(4);
          return r3[0] = e2[t2], r3[1] = e2[t2 + 1], r3[2] = e2[t2 + 2], r3[3] = e2[t2 + 3], new Float32Array(r3.buffer)[0];
        }, readDouble: function(e2, t2) {
          if (t2 < 0)
            throw "littleEndianByteArrayParser.readDouble: position cannot be less than 0";
          if (t2 + 8 > e2.length)
            throw "littleEndianByteArrayParser.readDouble: attempt to read past end of buffer";
          var r3 = new Uint8Array(8);
          return r3[0] = e2[t2], r3[1] = e2[t2 + 1], r3[2] = e2[t2 + 2], r3[3] = e2[t2 + 3], r3[4] = e2[t2 + 4], r3[5] = e2[t2 + 5], r3[6] = e2[t2 + 6], r3[7] = e2[t2 + 7], new Float64Array(r3.buffer)[0];
        } };
        function G(e2) {
          var i3 = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {};
          if (e2 === void 0)
            throw "dicomParser.readPart10Header: missing required parameter 'byteArray'";
          var o2 = i3.TransferSyntaxUID, s2 = new J(M, e2);
          return function() {
            var e3 = function() {
              if (s2.getSize() <= 132 && o2)
                return false;
              if (s2.seek(128), s2.readFixedString(4) === "DICM")
                return true;
              if (!(i3 || {}).TransferSyntaxUID)
                throw "dicomParser.readPart10Header: DICM prefix not found at location 132 - this is not a valid DICOM P10 file.";
              return s2.seek(0), false;
            }(), t2 = [], r3 = {};
            if (!e3)
              return s2.position = 0, { elements: { x00020010: { tag: "x00020010", vr: "UI", Value: o2 } }, warnings: t2 };
            for (; s2.position < s2.byteArray.length; ) {
              var a3 = s2.position, n3 = B(s2, t2);
              if ("x0002ffff" < n3.tag) {
                s2.position = a3;
                break;
              }
              n3.parser = M, r3[n3.tag] = n3;
            }
            return (e3 = new w(s2.byteArrayParser, s2.byteArray, r3)).warnings = s2.warnings, e3.position = s2.position, e3;
          }();
        }
        var z = "1.2.840.10008.1.2.2";
        function V(i3) {
          var o2 = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {};
          if (i3 === void 0)
            throw new Error("dicomParser.parseDicom: missing required parameter 'byteArray'");
          var e2, a3 = function(e3) {
            if (e3.elements.x00020010 === void 0)
              throw new Error("dicomParser.parseDicom: missing required meta header attribute 0002,0010");
            e3 = e3.elements.x00020010;
            return e3 && e3.Value || b(i3, e3.dataOffset, e3.length);
          };
          function t2(t3) {
            var e3 = a3(t3), r3 = e3 !== "1.2.840.10008.1.2", e3 = function(e4, t4) {
              var r4 = Object.prototype.toString.call(typeof process != "undefined" ? process : 0) === "[object process]";
              if (e4 !== "1.2.840.10008.1.2.1.99")
                return new J(e4 === z ? N : M, i3, t4);
              if (o2 && o2.inflater) {
                e4 = o2.inflater(i3, t4);
                return new J(M, e4, 0);
              }
              if (r4 == true) {
                var a4 = s(0), n3 = j(i3, t4, i3.length - t4), a4 = a4.inflateRawSync(n3), n3 = k(i3, a4.length + t4);
                return i3.copy(n3, 0, 0, t4), a4.copy(n3, t4), new J(M, n3, 0);
              }
              if (typeof pako == "undefined")
                throw "dicomParser.parseDicom: no inflater available to handle deflate transfer syntax";
              return a4 = i3.slice(t4), n3 = pako.inflateRaw(a4), (a4 = k(i3, n3.length + t4)).set(i3.slice(0, t4), 0), a4.set(n3, t4), new J(M, a4, 0);
            }(e3, t3.position), t3 = new w(e3.byteArrayParser, e3.byteArray, {});
            t3.warnings = e3.warnings;
            try {
              (r3 ? q : T)(t3, e3, e3.byteArray.length, o2);
            } catch (e4) {
              throw { exception: e4, dataSet: t3 };
            }
            return t3;
          }
          return function(e3, t3) {
            for (var r3 in e3.elements)
              e3.elements.hasOwnProperty(r3) && (t3.elements[r3] = e3.elements[r3]);
            return e3.warnings !== void 0 && (t3.warnings = e3.warnings.concat(t3.warnings)), t3;
          }(e2 = G(i3, o2), t2(e2));
        }
        var R = function(e2, t2, r3) {
          for (var a3 = 0, n3 = t2; n3 < t2 + r3; n3++)
            a3 += e2[n3].length;
          return a3;
        };
        function _(e2, t2, r3, a3, n3) {
          if (n3 = n3 || t2.fragments, e2 === void 0)
            throw "dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter 'dataSet'";
          if (t2 === void 0)
            throw "dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter 'pixelDataElement'";
          if (r3 === void 0)
            throw "dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter 'startFragmentIndex'";
          if ((a3 = a3 || 1) === void 0)
            throw "dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter 'numFragments'";
          if (t2.tag !== "x7fe00010")
            throw "dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to non pixel data tag (expected tag = x7fe00010";
          if (t2.encapsulatedPixelData !== true)
            throw "dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";
          if (t2.hadUndefinedLength !== true)
            throw "dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";
          if (t2.basicOffsetTable === void 0)
            throw "dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";
          if (t2.fragments === void 0)
            throw "dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";
          if (t2.fragments.length <= 0)
            throw "dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";
          if (r3 < 0)
            throw "dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'startFragmentIndex' must be >= 0";
          if (r3 >= t2.fragments.length)
            throw "dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'startFragmentIndex' must be < number of fragments";
          if (a3 < 1)
            throw "dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'numFragments' must be > 0";
          if (r3 + a3 > t2.fragments.length)
            throw "dicomParser.readEncapsulatedPixelDataFromFragments: parameter 'startFragment' + 'numFragments' < number of fragments";
          var i3 = new J(e2.byteArrayParser, e2.byteArray, t2.dataOffset), t2 = S(i3);
          if (t2.tag !== "xfffee000")
            throw "dicomParser.readEncapsulatedPixelData: missing basic offset table xfffee000";
          i3.seek(t2.length);
          var o2 = i3.position;
          if (a3 === 1)
            return j(i3.byteArray, o2 + n3[r3].offset + 8, n3[r3].length);
          for (var t2 = R(n3, r3, a3), s2 = k(i3.byteArray, t2), d2 = 0, f2 = r3; f2 < r3 + a3; f2++)
            for (var l2 = o2 + n3[f2].offset + 8, u2 = 0; u2 < n3[f2].length; u2++)
              s2[d2++] = i3.byteArray[l2++];
          return s2;
        }
        var H = function(e2, t2) {
          for (var r3 = 0; r3 < e2.length; r3++)
            if (e2[r3].offset === t2)
              return r3;
        }, Q = function(e2, t2, r3, a3) {
          if (e2 === t2.length - 1)
            return r3.length - a3;
          for (var n3 = t2[e2 + 1], i3 = a3 + 1; i3 < r3.length; i3++)
            if (r3[i3].offset === n3)
              return i3 - a3;
          throw "dicomParser.calculateNumberOfFragmentsForFrame: could not find fragment with offset matching basic offset table";
        };
        function W(e2, t2, r3, a3, n3) {
          if (a3 = a3 || t2.basicOffsetTable, n3 = n3 || t2.fragments, e2 === void 0)
            throw "dicomParser.readEncapsulatedImageFrame: missing required parameter 'dataSet'";
          if (t2 === void 0)
            throw "dicomParser.readEncapsulatedImageFrame: missing required parameter 'pixelDataElement'";
          if (r3 === void 0)
            throw "dicomParser.readEncapsulatedImageFrame: missing required parameter 'frameIndex'";
          if (a3 === void 0)
            throw "dicomParser.readEncapsulatedImageFrame: parameter 'pixelDataElement' does not have basicOffsetTable";
          if (t2.tag !== "x7fe00010")
            throw "dicomParser.readEncapsulatedImageFrame: parameter 'pixelDataElement' refers to non pixel data tag (expected tag = x7fe00010)";
          if (t2.encapsulatedPixelData !== true)
            throw "dicomParser.readEncapsulatedImageFrame: parameter 'pixelDataElement' refers to pixel data element that does not have encapsulated pixel data";
          if (t2.hadUndefinedLength !== true)
            throw "dicomParser.readEncapsulatedImageFrame: parameter 'pixelDataElement' refers to pixel data element that does not have undefined length";
          if (t2.fragments === void 0)
            throw "dicomParser.readEncapsulatedImageFrame: parameter 'pixelDataElement' refers to pixel data element that does not have fragments";
          if (a3.length === 0)
            throw "dicomParser.readEncapsulatedImageFrame: basicOffsetTable has zero entries";
          if (r3 < 0)
            throw "dicomParser.readEncapsulatedImageFrame: parameter 'frameIndex' must be >= 0";
          if (r3 >= a3.length)
            throw "dicomParser.readEncapsulatedImageFrame: parameter 'frameIndex' must be < basicOffsetTable.length";
          var i3 = a3[r3], i3 = H(n3, i3);
          if (i3 === void 0)
            throw "dicomParser.readEncapsulatedImageFrame: unable to find fragment that matches basic offset table entry";
          return _(e2, t2, i3, Q(r3, a3, n3, i3), n3);
        }
        var $ = false;
        function K(e2, t2, r3) {
          if ($ || ($ = true, console && console.log && console.log("WARNING: dicomParser.readEncapsulatedPixelData() has been deprecated")), e2 === void 0)
            throw "dicomParser.readEncapsulatedPixelData: missing required parameter 'dataSet'";
          if (t2 === void 0)
            throw "dicomParser.readEncapsulatedPixelData: missing required parameter 'element'";
          if (r3 === void 0)
            throw "dicomParser.readEncapsulatedPixelData: missing required parameter 'frame'";
          if (t2.tag !== "x7fe00010")
            throw "dicomParser.readEncapsulatedPixelData: parameter 'element' refers to non pixel data tag (expected tag = x7fe00010)";
          if (t2.encapsulatedPixelData !== true)
            throw "dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data";
          if (t2.hadUndefinedLength !== true)
            throw "dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data";
          if (t2.basicOffsetTable === void 0)
            throw "dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data";
          if (t2.fragments === void 0)
            throw "dicomParser.readEncapsulatedPixelData: parameter 'element' refers to pixel data element that does not have encapsulated pixel data";
          if (r3 < 0)
            throw "dicomParser.readEncapsulatedPixelData: parameter 'frame' must be >= 0";
          return t2.basicOffsetTable.length !== 0 ? W(e2, t2, r3) : _(e2, t2, 0, t2.fragments.length);
        }
        t.default = { isStringVr: d, isPrivateTag: f, parsePN: a2, parseTM: n2, parseDA: o, explicitElementToString: l, explicitDataSetToJS: u, createJPEGBasicOffsetTable: p, parseDicomDataSetExplicit: q, parseDicomDataSetImplicit: T, readFixedString: b, alloc: k, version: L, bigEndianByteArrayParser: N, ByteStream: J, sharedCopy: j, DataSet: w, findAndSetUNElementLength: y, findEndOfEncapsulatedElement: g, findItemDelimitationItemAndSetElementLength: x, littleEndianByteArrayParser: M, parseDicom: V, readDicomElementExplicit: B, readDicomElementImplicit: A, readEncapsulatedImageFrame: W, readEncapsulatedPixelData: K, readEncapsulatedPixelDataFromFragments: _, readPart10Header: G, readSequenceItemsExplicit: I, readSequenceItemsImplicit: F, readSequenceItem: S, readTag: h, LEI: "1.2.840.10008.1.2", LEE: "1.2.840.10008.1.2.1" };
      }], i = {}, n.m = a, n.c = i, n.d = function(e, t, r2) {
        n.o(e, t) || Object.defineProperty(e, t, { enumerable: true, get: r2 });
      }, n.r = function(e) {
        typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: true });
      }, n.t = function(t, e) {
        if (1 & e && (t = n(t)), 8 & e)
          return t;
        if (4 & e && typeof t == "object" && t && t.__esModule)
          return t;
        var r2 = /* @__PURE__ */ Object.create(null);
        if (n.r(r2), Object.defineProperty(r2, "default", { enumerable: true, value: t }), 2 & e && typeof t != "string")
          for (var a2 in t)
            n.d(r2, a2, function(e2) {
              return t[e2];
            }.bind(null, a2));
        return r2;
      }, n.n = function(e) {
        var t = e && e.__esModule ? function() {
          return e.default;
        } : function() {
          return e;
        };
        return n.d(t, "a", t), t;
      }, n.o = function(e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
      }, n.p = "", n(n.s = 1);
      function n(e) {
        if (i[e])
          return i[e].exports;
        var t = i[e] = { i: e, l: false, exports: {} };
        return a[e].call(t.exports, t, t.exports, n), t.l = true, t.exports;
      }
      var a, i;
    });
  }
});

// dep:dicom-parser
var dicom_parser_default = require_dicomParser_min();
export {
  dicom_parser_default as default
};
/*! dicom-parser - 1.8.12 - 2022-02-07 | (c) 2017 Chris Hafey | https://github.com/cornerstonejs/dicomParser */
//# sourceMappingURL=dicom-parser.js.map
